
// // frontend/src/pages/BookingForm.jsx
// import React, { useState, useEffect } from 'react';
// import { useLocation, useNavigate } from 'react-router-dom';
// import { bookingApis, paymentApis } from '../api/apis';
// import Loader from '../components/Loader';
// import { useAuth } from '../context/AuthContext';

// // Razorpay script loader helper
// const loadRazorpayScript = (src) => {
//   return new Promise((resolve) => {
//     const script = document.createElement('script');
//     script.src = src;
//     script.onload = () => resolve(true);
//     script.onerror = () => resolve(false);
//     document.body.appendChild(script);
//   });
// };

// const BookingForm = () => {
//   const navigate = useNavigate();
//   const location = useLocation();
//   const { userInfo } = useAuth();
//   const service = location.state?.service;

//   const [formData, setFormData] = useState({
//     name: userInfo?.name || '',
//     email: userInfo?.email || '',
//     phone: userInfo?.phone || '',
//     serviceId: service?._id || '',
//     preferredTime: '',
//     address: '',
//     latitude: 0,
//     longitude: 0,
//     isLiveLocation: false,
//   });

//   const [loading, setLoading] = useState(false);
//   const [error, setError] = useState(null);

//   useEffect(() => {
//     if (!service) setError('Please select a service first.');
//   }, [service]);

//   // Capture GPS Location
//   const handleLocationToggle = (e) => {
//     const isLive = e.target.checked;
//     setFormData((prev) => ({ ...prev, isLiveLocation: isLive }));

//     if (isLive && navigator.geolocation) {
//       setError(null);
//       setLoading(true);
//       navigator.geolocation.getCurrentPosition(
//         (pos) => {
//           setLoading(false);
//           setFormData((prev) => ({
//             ...prev,
//             latitude: pos.coords.latitude,
//             longitude: pos.coords.longitude,
//           }));
//         },
//         (err) => {
//           setLoading(false);
//           setError('Failed to access location. Enter address manually.');
//           setFormData((prev) => ({
//             ...prev,
//             isLiveLocation: false,
//             latitude: 0,
//             longitude: 0,
//           }));
//           console.error(err);
//         }
//       );
//     } else if (!isLive) {
//       setFormData((prev) => ({ ...prev, latitude: 0, longitude: 0 }));
//     }
//   };

//   const submitBooking = async (e) => {
//     e.preventDefault();

//     if (!service) return setError('Service details missing.');
//     if (!formData.address.trim())
//       return setError('Full address is mandatory.');
//     if (formData.latitude === 0 || formData.longitude === 0)
//       return setError('Please set your live or map location.');
//     if (!formData.preferredTime)
//       return setError('Please select a preferred date and time.');

//     setLoading(true);
//     setError(null);

//     const bookingPayload = {
//       serviceId: formData.serviceId,
//       preferredTime: formData.preferredTime,
//       address: formData.address,
//       lat: formData.latitude,
//       lng: formData.longitude,
//       customerName: formData.name,
//       customerEmail: formData.email,
//       customerPhone: formData.phone,
//     };

//     try {
//       // Step 1 - Create Booking (status: Pending Payment)
//       const { data: bookingData } = await bookingApis.createBooking(bookingPayload);

//       // Step 2 - Create Razorpay Order
//    const { data: orderData } = await paymentApis.createOrder({ bookingId: bookingData._id });


//       // Step 3 - Load Razorpay SDK
//       const loaded = await loadRazorpayScript('https://checkout.razorpay.com/v1/checkout.js');
//       if (!loaded) throw new Error('Failed to load Razorpay SDK.');

//       // Step 4 - Open Razorpay Payment Modal
//       const options = {
//         key: orderData.keyId,
//         amount: orderData.amount,
//         currency: orderData.currency,
//         name: 'Daksh Waterproofing Solutions',
//         description: service.name,
//         order_id: orderData.orderId,
//         handler: async (response) => {
//           try {
//             alert('Payment successful! Booking confirmed.');
//             navigate('/profile?tab=bookings');
//           } catch (err) {
//             console.error('Post-payment update failed:', err);
//           }
//         },
//         prefill: {
//           name: formData.name,
//           email: formData.email,
//           contact: formData.phone,
//         },
//         theme: { color: '#2563eb' },
//       };

//       const paymentObject = new window.Razorpay(options);
//       paymentObject.open();
//     } catch (err) {
//       const msg = err.response?.data?.message || 'Booking/payment failed.';
//       setError(msg);
//     } finally {
//       setLoading(false);
//     }
//   };

//   if (!service) return <Loader />;

//   return (
//     <div className="min-h-screen bg-gray-50 flex justify-center py-12 px-4 sm:px-6 lg:px-8">
//       <div className="max-w-xl w-full space-y-8">
//         <div className="text-center">
//           <h1 className="text-3xl font-extrabold text-gray-900">
//             Book: {service.name}
//           </h1>
//           <p className="mt-2 text-sm text-gray-600">
//             Service Fee:{' '}
//             <span className="text-xl font-bold text-indigo-600">
//               â‚¹{service.basePrice.toLocaleString()}
//             </span>
//           </p>
//         </div>

//         <form
//           onSubmit={submitBooking}
//           className="bg-white p-8 shadow-2xl rounded-xl space-y-6"
//         >
//           {loading && <Loader />}
//           {error && (
//             <div
//               className="bg-red-50 border-l-4 border-red-400 text-red-700 p-4 rounded"
//               role="alert"
//             >
//               <p className="font-bold">Booking Error</p>
//               <p>{error}</p>
//             </div>
//           )}

//           {/* Contact Info */}
//           <div>
//             <h2 className="text-xl font-semibold text-gray-800 mb-4 border-b">
//               Contact Information
//             </h2>
//             <div className="space-y-4">
//               <input
//                 type="text"
//                 placeholder="Full Name"
//                 required
//                 value={formData.name}
//                 onChange={(e) =>
//                   setFormData({ ...formData, name: e.target.value })
//                 }
//                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
//               />
//               <input
//                 type="email"
//                 placeholder="Email Address"
//                 required
//                 value={formData.email}
//                 onChange={(e) =>
//                   setFormData({ ...formData, email: e.target.value })
//                 }
//                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
//               />
//               <input
//                 type="tel"
//                 placeholder="Phone Number"
//                 required
//                 value={formData.phone}
//                 onChange={(e) =>
//                   setFormData({ ...formData, phone: e.target.value })
//                 }
//                 className="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
//               />
//             </div>
//           </div>

//           {/* Address + Location */}
//           <div>
//             <h2 className="text-xl font-semibold text-gray-800 mb-4 border-b mt-6">
//               Service Location
//             </h2>

//             <textarea
//               id="address"
//               rows="3"
//               required
//               value={formData.address}
//               onChange={(e) =>
//                 setFormData({ ...formData, address: e.target.value })
//               }
//               className="w-full mt-1 p-3 border border-gray-300 rounded-lg focus:ring-orange-500"
//               placeholder="House/Flat, Street, Landmark, City, Pin Code"
//             />

//             <div className="mt-4 flex items-center justify-between bg-gray-50 p-3 border rounded-lg">
//               <label className="font-medium text-sm text-gray-700">
//                 Capture Live Location (GPS)
//               </label>
//               <input
//                 type="checkbox"
//                 checked={formData.isLiveLocation}
//                 onChange={handleLocationToggle}
//                 className="w-5 h-5 text-indigo-600 border-gray-300 rounded"
//               />
//             </div>

//             <div
//               className={`border-2 ${
//                 formData.latitude
//                   ? 'border-green-500 bg-green-50'
//                   : 'border-red-500 bg-red-50'
//               } p-3 rounded-lg text-center mt-2`}
//             >
//               <p className="font-semibold text-sm">Live Coordinates</p>
//               <div className="mt-1 text-gray-700 font-mono text-xs">
//                 Lat: {formData.latitude.toFixed(4)}, Lng:{' '}
//                 {formData.longitude.toFixed(4)}
//               </div>
//             </div>
//           </div>

//           {/* Preferred Time */}
//           <div>
//             <h2 className="text-xl font-semibold text-gray-800 mb-4 border-b mt-6">
//               Preferred Time Slot
//             </h2>
//             <input
//               type="datetime-local"
//               required
//               value={formData.preferredTime}
//               onChange={(e) =>
//                 setFormData({ ...formData, preferredTime: e.target.value })
//               }
//               className="w-full mt-1 p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
//             />
//           </div>

//           {/* Submit */}
//           <button
//             type="submit"
//             disabled={
//               loading ||
//               !formData.address.trim() ||
//               !formData.latitude ||
//               !formData.preferredTime
//             }
//             className="w-full py-3 px-4 text-lg font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 disabled:bg-gray-400"
//           >
//             {loading
//               ? 'Processing...'
//               : `Pay â‚¹${service.basePrice.toLocaleString()} & Confirm Booking`}
//           </button>
//         </form>
//       </div>
//     </div>
//   );
// };

// export default BookingForm;

// frontend/src/pages/BookingForm.jsx (FIXED)
import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { bookingApis, paymentApis } from '../api/apis';
import Loader from '../components/Loader';
import { useAuth } from '../context/AuthContext';

// Razorpay script loader helper
const loadRazorpayScript = (src) => {
Â  return new Promise((resolve) => {
Â  Â  const script = document.createElement('script');
Â  Â  script.src = src;
Â  Â  script.onload = () => resolve(true);
Â  Â  script.onerror = () => resolve(false);
Â  Â  document.body.appendChild(script);
Â  });
};

const BookingForm = () => {
Â  const navigate = useNavigate();
Â  const location = useLocation();
Â  const { userInfo } = useAuth();
Â  const service = location.state?.service;

Â  const [formData, setFormData] = useState({
Â  Â  name: userInfo?.name || '',
Â  Â  email: userInfo?.email || '',
Â  Â  phone: userInfo?.phone || '',
Â  Â  serviceId: service?._id || '',
Â  Â  preferredTime: '',
Â  Â  address: '',
Â  Â  latitude: 0,
Â  Â  longitude: 0,
Â  Â  isLiveLocation: false,
Â  });

Â  const [loading, setLoading] = useState(false);
Â  const [error, setError] = useState(null);

Â  useEffect(() => {
Â  Â  if (!service) setError('Please select a service first.');
Â  }, [service]);

Â  // Capture GPS Location
Â  const handleLocationToggle = (e) => {
Â  Â  const isLive = e.target.checked;
Â  Â  setFormData((prev) => ({ ...prev, isLiveLocation: isLive }));

Â  Â  if (isLive && navigator.geolocation) {
Â  Â  Â  setError(null);
Â  Â  Â  setLoading(true);
Â  Â  Â  navigator.geolocation.getCurrentPosition(
Â  Â  Â  Â  (pos) => {
Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  setFormData((prev) => ({
Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  latitude: pos.coords.latitude,
Â  Â  Â  Â  Â  Â  longitude: pos.coords.longitude,
Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  },
Â  Â  Â  Â  (err) => {
Â  Â  Â  Â  Â  setLoading(false);
Â  Â  Â  Â  Â  setError('Failed to access location. Enter address manually.');
Â  Â  Â  Â  Â  setFormData((prev) => ({
Â  Â  Â  Â  Â  Â  ...prev,
Â  Â  Â  Â  Â  Â  isLiveLocation: false,
Â  Â  Â  Â  Â  Â  latitude: 0,
Â  Â  Â  Â  Â  Â  longitude: 0,
Â  Â  Â  Â  Â  }));
Â  Â  Â  Â  Â  console.error(err);
Â  Â  Â  Â  }
Â  Â  Â  );
Â  Â  } else if (!isLive) {
Â  Â  Â  setFormData((prev) => ({ ...prev, latitude: 0, longitude: 0 }));
Â  Â  }
Â  };

Â  const submitBooking = async (e) => {
Â  Â  e.preventDefault();

Â  Â  if (!service) return setError('Service details missing.');
Â  Â  if (!formData.address.trim())
Â  Â  Â  return setError('Full address is mandatory.');
Â  Â  if (formData.latitude === 0 || formData.longitude === 0)
Â  Â  Â  return setError('Please set your live or map location.');
Â  Â  if (!formData.preferredTime)
Â  Â  Â  return setError('Please select a preferred date and time.');

Â  Â  setLoading(true);
Â  Â  setError(null);

Â  Â  const bookingPayload = {
Â  Â  Â  serviceId: formData.serviceId,
Â  Â  Â  preferredTime: formData.preferredTime,
Â  Â  Â  address: formData.address,
Â  Â  Â  lat: formData.latitude,
Â  Â  Â  lng: formData.longitude,
Â  Â  Â  customerName: formData.name,
Â  Â  Â  customerEmail: formData.email,
Â  Â  Â  customerPhone: formData.phone,
Â  Â  };

Â  Â  try {
Â  Â  Â  // Step 1 - Create Booking (status: Pending Payment)
Â  Â  Â  const { data: bookingData } = await bookingApis.createBooking(bookingPayload);

Â  Â  Â  // Step 2 - Create Razorpay Order
Â  Â const { data: orderData } = await paymentApis.createOrder({ bookingId: bookingData._id });


Â  Â  Â  // Step 3 - Load Razorpay SDK
Â  Â  Â  const loaded = await loadRazorpayScript('https://checkout.razorpay.com/v1/checkout.js');
Â  Â  Â  if (!loaded) throw new Error('Failed to load Razorpay SDK.');

Â  Â  Â  // Step 4 - Open Razorpay Payment Modal
Â  Â  Â  const options = {
Â  Â  Â  Â  key: orderData.keyId,
Â  Â  Â  Â  amount: orderData.amount,
Â  Â  Â  Â  currency: orderData.currency,
Â  Â  Â  Â  name: 'Daksh Waterproofing Solutions',
Â  Â  Â  Â  description: service.name,
Â  Â  Â  Â  order_id: orderData.orderId,
Â  Â  Â  Â  handler: async (response) => {
Â  Â  Â  Â  Â  try {
                // *** FIX: Call backend verification API after successful payment ***
                const verificationPayload = {
                    razorpay_order_id: response.razorpay_order_id,
                    razorpay_payment_id: response.razorpay_payment_id,
                    razorpay_signature: response.razorpay_signature,
                };

                await paymentApis.verifyPayment(verificationPayload);
                
Â  Â  Â  Â  Â  Â  alert('Payment successful! Booking Confirmed.');
Â  Â  Â  Â  Â  Â  navigate('/profile?tab=bookings');
Â  Â  Â  Â  Â  } catch (err) {
Â  Â  Â  Â  Â  Â  console.error('Payment verification failed on server:', err);
Â  Â  Â  Â  Â  Â  alert('Payment verification failed. Your booking status might still be pending. Please contact support.');
             // Still navigate, so the user can check the status, even if pending
            navigate('/profile?tab=bookings');
Â  Â  Â  Â  Â  }
Â  Â  Â  Â  },
Â  Â  Â  Â  prefill: {
Â  Â  Â  Â  Â  name: formData.name,
Â  Â  Â  Â  Â  email: formData.email,
Â  Â  Â  Â  Â  contact: formData.phone,
Â  Â  Â  Â  },
Â  Â  Â  Â  theme: { color: '#2563eb' },
Â  Â  Â  };

Â  Â  Â  const paymentObject = new window.Razorpay(options);
Â  Â  Â  paymentObject.open();
Â  Â  } catch (err) {
Â  Â  Â  const msg = err.response?.data?.message || 'Booking/payment failed.';
Â  Â  Â  setError(msg);
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  if (!service) return <Loader />;

Â  return (
Â  Â  <div className="min-h-screen bg-gray-50 flex justify-center py-12 px-4 sm:px-6 lg:px-8">
Â  Â  Â  <div className="max-w-xl w-full space-y-8">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <h1 className="text-3xl font-extrabold text-gray-900">
Â  Â  Â  Â  Â  Â  Book: {service.name}
Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  <p className="mt-2 text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  Service Fee:{' '}
Â  Â  Â  Â  Â  Â  <span className="text-xl font-bold text-indigo-600">
Â  Â  Â  Â  Â  Â  Â  â‚¹{service.basePrice.toLocaleString()}
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <form
Â  Â  Â  Â  Â  onSubmit={submitBooking}
Â  Â  Â  Â  Â  className="bg-white p-8 shadow-2xl rounded-xl space-y-6"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {loading && <Loader />}
Â  Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  className="bg-red-50 border-l-4 border-red-400 text-red-700 p-4 rounded"
Â  Â  Â  Â  Â  Â  Â  role="alert"
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <p className="font-bold">Booking Error</p>
Â  Â  Â  Â  Â  Â  Â  <p>{error}</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}

Â  Â  Â  Â  Â  {/* Contact Info */}
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold text-gray-800 mb-4 border-b">
Â  Â  Â  Â  Â  Â  Â  Contact Information
Â  Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  <div className="space-y-4">
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="text"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Full Name"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.name}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  setFormData({ ...formData, name: e.target.value })
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="email"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Email Address"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.email}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  setFormData({ ...formData, email: e.target.value })
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="tel"
Â  Â  Â  Â  Â  Â  Â  Â  placeholder="Phone Number"
Â  Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  Â  value={formData.phone}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  Â  setFormData({ ...formData, phone: e.target.value })
Â  Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  Â  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Address + Location */}
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold text-gray-800 mb-4 border-b mt-6">
Â  Â  Â  Â  Â  Â  Â  Service Location
Â  Â  Â  Â  Â  Â  </h2>

Â  Â  Â  Â  Â  Â  <textarea
Â  Â  Â  Â  Â  Â  Â  id="address"
Â  Â  Â  Â  Â  Â  Â  rows="3"
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  value={formData.address}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  setFormData({ ...formData, address: e.target.value })
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  className="w-full mt-1 p-3 border border-gray-300 rounded-lg focus:ring-orange-500"
Â  Â  Â  Â  Â  Â  Â  placeholder="House/Flat, Street, Landmark, City, Pin Code"
Â  Â  Â  Â  Â  Â  />

Â  Â  Â  Â  Â  Â  <div className="mt-4 flex items-center justify-between bg-gray-50 p-3 border rounded-lg">
Â  Â  Â  Â  Â  Â  Â  <label className="font-medium text-sm text-gray-700">
Â  Â  Â  Â  Â  Â  Â  Â  Capture Live Location (GPS)
Â  Â  Â  Â  Â  Â  Â  </label>
Â  Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  Â  type="checkbox"
Â  Â  Â  Â  Â  Â  Â  Â  checked={formData.isLiveLocation}
Â  Â  Â  Â  Â  Â  Â  Â  onChange={handleLocationToggle}
Â  Â  Â  Â  Â  Â  Â  Â  className="w-5 h-5 text-indigo-600 border-gray-300 rounded"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  className={`border-2 ${
Â  Â  Â  Â  Â  Â  Â  Â  formData.latitude
Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'border-green-500 bg-green-50'
Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'border-red-500 bg-red-50'
Â  Â  Â  Â  Â  Â  Â  } p-3 rounded-lg text-center mt-2`}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold text-sm">Live Coordinates</p>
Â  Â  Â  Â  Â  Â  Â  <div className="mt-1 text-gray-700 font-mono text-xs">
Â  Â  Â  Â  Â  Â  Â  Â  Lat: {formData.latitude.toFixed(4)}, Lng:{' '}
Â  Â  Â  Â  Â  Â  Â  Â  {formData.longitude.toFixed(4)}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Preferred Time */}
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-semibold text-gray-800 mb-4 border-b mt-6">
Â  Â  Â  Â  Â  Â  Â  Preferred Time Slot
Â  Â  Â  Â  Â  Â  </h2>
Â  Â  Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  Â  Â  type="datetime-local"
Â  Â  Â  Â  Â  Â  Â  required
Â  Â  Â  Â  Â  Â  Â  value={formData.preferredTime}
Â  Â  Â  Â  Â  Â  Â  onChange={(e) =>
Â  Â  Â  Â  Â  Â  Â  Â  setFormData({ ...formData, preferredTime: e.target.value })
Â  Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  Â  className="w-full mt-1 p-3 border border-gray-300 rounded-lg focus:ring-indigo-500"
Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Submit */}
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  type="submit"
Â  Â  Â  Â  Â  Â  disabled={
Â  Â  Â  Â  Â  Â  Â  loading ||
Â  Â  Â  Â  Â  Â  Â  !formData.address.trim() ||
Â  Â  Â  Â  Â  Â  Â  !formData.latitude ||
Â  Â  Â  Â  Â  Â  Â  !formData.preferredTime
Â  Â  Â  Â  Â  Â  }
Â  Â  Â  Â  Â  Â  className="w-full py-3 px-4 text-lg font-medium text-white bg-indigo-600 rounded-lg hover:bg-indigo-700 disabled:bg-gray-400"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {loading
Â  Â  Â  Â  Â  Â  Â  ? 'Processing...'
Â  Â  Â  Â  Â  Â  Â  : `Pay â‚¹${service.basePrice.toLocaleString()} & Confirm Booking`}
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </form>
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

export default BookingForm;